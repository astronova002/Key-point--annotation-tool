# Generated by Django 5.2.3 on 2025-06-15 18:44

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('images', '0001_fix_legacy_annotation_table'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assignment_type', models.CharField(choices=[('INITIAL', 'Initial Assignment'), ('REVISION', 'Revision Assignment'), ('QUALITY_CHECK', 'Quality Check'), ('SECOND_OPINION', 'Second Opinion')], default='INITIAL', max_length=20)),
                ('priority', models.IntegerField(default=5, help_text='1-10, higher = more urgent', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('estimated_completion_hours', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ASSIGNED', 'Assigned'), ('ACKNOWLEDGED', 'Acknowledged'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('SUBMITTED', 'Submitted'), ('OVERDUE', 'Overdue')], default='ASSIGNED', max_length=20)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('images_completed', models.IntegerField(default=0)),
                ('images_total', models.IntegerField()),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_time_spent_minutes', models.IntegerField(default=0)),
                ('avg_time_per_image_minutes', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('pause_count', models.IntegerField(default=0)),
                ('self_reported_difficulty', models.IntegerField(blank=True, help_text='1-5 scale', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('completion_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('annotator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_assignments', to=settings.AUTH_USER_MODEL)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_assignments', to=settings.AUTH_USER_MODEL)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='images.imagebatch')),
            ],
            options={
                'db_table': 'batch_assignments',
                'ordering': ['-assigned_at'],
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('refined_keypoints', models.JSONField(help_text='Final annotator coordinates and metadata')),
                ('keypoint_confidence', models.JSONField(blank=True, help_text='Per-keypoint confidence scores 0-1', null=True)),
                ('keypoint_visibility', models.JSONField(blank=True, help_text='Per-keypoint visibility flags', null=True)),
                ('keypoint_notes', models.JSONField(blank=True, help_text='Per-keypoint specific notes', null=True)),
                ('annotation_quality_score', models.DecimalField(blank=True, decimal_places=2, help_text='Self-assessment 0-1', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('difficulty_rating', models.CharField(blank=True, choices=[('EASY', 'Easy'), ('MEDIUM', 'Medium'), ('HARD', 'Hard'), ('VERY_HARD', 'Very Hard')], max_length=10, null=True)),
                ('difficulty_reasons', models.JSONField(blank=True, help_text='List of difficulty reasons', null=True)),
                ('annotation_tool_version', models.CharField(blank=True, max_length=20, null=True)),
                ('total_keypoints_modified', models.IntegerField(default=0, help_text='Number of keypoints modified from YOLO baseline')),
                ('major_corrections_made', models.BooleanField(default=False)),
                ('used_ai_suggestions', models.BooleanField(default=False)),
                ('general_notes', models.TextField(blank=True, null=True)),
                ('image_quality_feedback', models.TextField(blank=True, null=True)),
                ('suggested_improvements', models.TextField(blank=True, null=True)),
                ('version', models.IntegerField(default=1)),
                ('is_revision', models.BooleanField(default=False)),
                ('revision_reason', models.TextField(blank=True, null=True)),
                ('time_spent_seconds', models.IntegerField()),
                ('pause_count', models.IntegerField(default=0)),
                ('zoom_level_used', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('COMPLETED', 'Completed'), ('SUBMITTED', 'Submitted'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('REVISION_REQUESTED', 'Revision Requested')], default='DRAFT', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='images.image')),
                ('original_annotation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='annotations.annotation')),
                ('batch_assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='annotations.batchassignment')),
            ],
            options={
                'db_table': 'annotations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='batchassignment',
            index=models.Index(fields=['annotator', 'status'], name='batch_assig_annotat_6ac62c_idx'),
        ),
        migrations.AddIndex(
            model_name='batchassignment',
            index=models.Index(fields=['batch'], name='batch_assig_batch_i_6108c9_idx'),
        ),
        migrations.AddIndex(
            model_name='batchassignment',
            index=models.Index(fields=['due_date'], name='batch_assig_due_dat_fc45e1_idx'),
        ),
        migrations.AddIndex(
            model_name='batchassignment',
            index=models.Index(fields=['assigned_at'], name='batch_assig_assigne_0b8e3b_idx'),
        ),
        migrations.AddIndex(
            model_name='batchassignment',
            index=models.Index(fields=['priority', 'assigned_at'], name='batch_assig_priorit_fdc621_idx'),
        ),
        migrations.AddIndex(
            model_name='annotation',
            index=models.Index(fields=['image'], name='annotations_image_i_72728a_idx'),
        ),
        migrations.AddIndex(
            model_name='annotation',
            index=models.Index(fields=['batch_assignment'], name='annotations_batch_a_d79acf_idx'),
        ),
        migrations.AddIndex(
            model_name='annotation',
            index=models.Index(fields=['status'], name='annotations_status_709eac_idx'),
        ),
        migrations.AddIndex(
            model_name='annotation',
            index=models.Index(fields=['submitted_at'], name='annotations_submitt_9135c2_idx'),
        ),
        migrations.AddIndex(
            model_name='annotation',
            index=models.Index(fields=['annotation_quality_score'], name='annotations_annotat_146fac_idx'),
        ),
        migrations.AddIndex(
            model_name='annotation',
            index=models.Index(fields=['created_at'], name='annotations_created_f968cb_idx'),
        ),
    ]
